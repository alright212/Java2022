Erindid

Harjutustunniks vajalik kood asub: https://bitbucket.org/mkalmo/icd0019exceptions

1. Kirjutage valmis klassis exceptions.basic.TryCatchSample meetod readDataFrom().
   
   Meetod peab sissetuleva Resource tüüpi argumendi
   - avama (open)
   - sellest lugema (read)
   - ja selle sulgema (close)
   
   Kui lugemisel juhtub viga, peaks meetod tagastama "someDefaultValue".
   
   Koodi testimiseks on samas paketis asuv klass TryCatchSampleTests.java.

2. Paketis exceptions.validate on varem kirjutatud klass MinimumElement,
   mille meetod minimumElement() leiab massiivist väikseima elemendi.
   
   See, et meetod tagastab tühja sisendmassiivi puhul nulli, on halb lahendus.
   
   Muutke käitumist nii, et tühja massiivi või null-i puhul viskaks 
   meetod erindi (IllegalArgumentException).
   
   Kirjutage klassi MinimumElementTests test mõlema juhu kontrollimiseks.

3. Paketis exceptions.bad on klass BadTryCatch meetodiga containsSingleLetters().

   Selles meetodis on sobimatu try/catch konstruktsioon. Meetodis on ka viga, 
   mis avaldub, kui sisend on null.

   Tehke see containsSingleLetters() meetod korda. 
   
   Koodi testimiseks on samas paketis asuv klass BadTryCatchTest.java.
   
4. Paketis exceptions.price on klass PriceCalculator meetodiga calculatePrice().
   
   Antud koodis on veahaldusloogika lahendatud erilise väärtuse 
   -1 abil. MyFileResource.read() näitab ebaõnnestumist tagastades 
   väärtuse -1.
   
   Kui viga juhtus, annab sellest calculatePrice() samuti teada tagastades -1.
   
   PriceCalculator klassi välist funktsionaalsust me muuta ei saa aga
   soovime klassi sees kasutada vea tähistamiseks erindeid.
   
   Tehke nii, et readProfitConstant() viskaks vea korral erindi (MissingConstantException). 
   Hiljem püüdke see koodis kinni ja tagastage lõpptulemusena -1.

   Tehke nii, et kood töötaks ka juhul, kui konstandi lugemisel vistakse erind.

   Koodi testimiseks on samas paketis asuv klass PriceCalculatorTest.java.
   
5. Paketis exceptions.wrap on klass DirectoryListPrinter meetodiga printDirectoryList().
   
   Meetodi DirectoryListPrinter.getDirectoryFileList() deklaratsioonis on 
   märgitud "throws IOException" ja seega peab sama märke tegema ka 
   meetodistes, mis seda omakorda kasutavad.
   
   Kasutage meetodis getDirectoryFileList() erindite mähkimist (wrapping)
   selleks, et saaks kõigi meetodite deklaratsioonidest "throws IOException"
   eemaldada. 

6. Paketis exceptions.translate on klass ConfigurationLoader meetodiga 
   loadConfiguration(). Meedodi käivitamiseks on klass ConfigurationLoaderTests.

   Kui konfiguratsiooni lugemine ebaõnnestub teadatakse meile sellest erindiga.
   
   Soovime muuta programmi nii, et üldise erindi asemel visatakse 
   rakendusespetsiifiline erind.
   
   Kui konfiguratsiooni faili ei eksisteeri peaks programm viskama 
   erindi nimega ConfigurationException. Seda olukorda saate proovida määrates 
   konfiguratsioonifaili asukohaks "./hello".
   
   Kui konfiguratsiooni fail viitab faili asemel kataloogile peaks programm 
   viskama erinidi nimega InstallationException. Seda olukorda saate proovida 
   määrates konfiguratsioonifaili asukohaks "./".
   
7. Kirjutage programm, mis võtab sisse täisarvulise numbri ja tagastab 
   selle sõnadena. nt. 123 -> "ükssada kakskümmend kolm"
   
   Seda programmi võiks kasutada näiteks arvete automaatse genereerimise 
   juures.
   
   Soovime, et programm ei oleks seotud konkreetse keelega ja hiljem 
   oleks võimalik uusi keeli lisada.
   
   See paindlikus on lahendatud selliselt, et numbritega seotud sõnad on
   programmi juurde kuuluvates failides võti-väärtus paaridena.
   
   nt. 1=üks
       2=kaks
       teen=teist
       tens-suffix=kümmend

   Esialgu peate programmi tööle saama eesti ja inglise keeles ning ühes 
   kunstlikus keeles. Vastavad tõlke failid on ette antud.
   
   Kuna erinevates keeltes on numbreid tähistavate sõnade moodustamine 
   erinev, siis soovime selle erinevuse samuti tõlgetefaili abil lahendada.
   
   Näiteks eesti keeles on "üksteist" moodustatav sama reegli järgi, 
   nagu näiteks "kolmteist". Inglise keeles on "eleven" ebareeglipärane.
   
   Seega kui miski on ebareeglipärane, siis peab selle jaoks eraldi 
   tõlge olema. Kui programm mingi numbri jaoks tõlget ei leia, siis 
   moodustab ta selle üldise reegli alusel.
   
   nt. 11 = "üks" + "teist", 12 = "kaks" + "teist", jne.
   
   Programm peaks teatud vigadest teatama erindi viskamisega. Need 
   olukorrad on kirjeldatud programmi testides.

   Kvaliteetne programm on selline, mis on võimalikult paindlik ja 
   milles on võimalikult vähe duplikatsiooni.
   
   Keele failidest info lugemise näide on failis ReadPropertiesFileExample.java.
   
   Numbrite osadeks jagamise näide:   
      int number = 23;
      int tens = number / 10; // jagamine täisarvu täpsusega
      int ones = number % 10;

   Selle ülesande koha on ka koodi ülevaatuse võimalus. Kui esitate lahenduse 
   tähtajaks, siis tähtaja möödudes on teil võimalik kellegi teise tudengi 
   tööd hinnata ja selle eest punkte saada. 
   
   Ülevaatuse leiate pärast tähtaja möödumist hindamisüsteemist ja selle 
   esitamiseks on aega 7 päeva.

   Ülevaatusel tuleb vastata kahele küsimusele.
     - Kas koodis on kohti, mis on seotud konkreetse keelega (Nt. eesti keelega)?
     - Kas kõik avatud ressursid saavad ka suletud?
   
8. Tõstke kõik failid, mis on kataloogis src/exceptions oma Bitbucket-i 
   reposse (icd0019) kataloogi src/exceptions.
    
    Veenduge, et kood kompileerub.
    
    Kui valite Idea-s Build menüüst -> Rebuild project peaks tulema teade 
    "Compilation completed successfully ..."
    
    Veenduge, et testid lähevad läbi.
    
    Commit-ige muudatused ja push-ige need Bitbucket-isse. 
    
    Lisage commit-ile tag ex05.
    
    Veenduge tulemuste lehelt, et tulemus on positiivne.

Lahendused ja seletused 1-6 seletused 7: https://youtu.be/Xq1k4Oyfuo4